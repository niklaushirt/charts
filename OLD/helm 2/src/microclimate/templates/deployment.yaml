#*******************************************************************************
# Licensed Materials - Property of IBM
# "Restricted Materials of IBM"
#
# Copyright IBM Corp. 2017 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#*******************************************************************************

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" .}}
  labels:
    app: {{ template "fullname" .}}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"

spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      release: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "fullname" .}}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
      annotations:
        productName: "IBM Microclimate v1"
        productID: "IBMMicroclimate_18.03_perpetual_00000"
        productVersion: "18.03"

    spec:
      affinity:
      {{- include "nodeaffinity" . | indent 8 }}

      volumes:
      - name: shared-workspace
      {{- if and .Values.persistence.enabled .Values.persistence.existingClaimName}}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaimName}}
      {{- else if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "fullname" .}}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: docker-socket
        hostPath:
          path: /var/run/
      {{- if .Values.jenkins.Pipeline.Registry.Secret }}
      - name: registry-secret
        secret:
          secretName: "{{ .Values.jenkins.Pipeline.Registry.Secret}}"
      {{- end }}

      containers:

      - name: microclimate-portal
        image: {{ .Values.portal.repository}}:{{ .Values.portal.tag}}
        imagePullPolicy: "{{ .Values.imagePullPolicy}}"
        volumeMounts:
        - name: shared-workspace
          mountPath: /microclimate-workspace
        - name: docker-socket
          mountPath: /var/run/
        env:
          - name: IN_K8
            value: "true"
          - name: JMETER_IMAGE
            value: {{ .Values.jmeter.repository}}:{{ .Values.jmeter.tag}}
          - name: SERVICE_NAME
            value: {{ template "fullname" .}}
          - name: EDITOR_IMAGE
            value: {{ .Values.theia.repository}}:{{ .Values.theia.tag}}
          - name: EDITOR_MEM_REQUEST
            value: {{ .Values.theia.resources.requests.memory}}
          - name: EDITOR_CPU_REQUEST
            value: {{ .Values.theia.resources.requests.cpu}}
          - name: EDITOR_MEM_LIMIT
            value: {{ .Values.theia.resources.limits.memory}}
          - name: EDITOR_CPU_LIMIT
            value: {{ .Values.theia.resources.limits.cpu}}
        ports:
        - containerPort: {{ .Values.ports.portal }}
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          httpGet:
            path: /
            port: {{ .Values.ports.portal }}
        readinessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          httpGet:
            path: /
            port: {{ .Values.ports.portal }}
        resources:
          requests:
            memory: {{ .Values.portal.resources.requests.memory }}
            cpu: {{ .Values.portal.resources.requests.cpu }}
          limits:
            memory: {{ .Values.portal.resources.limits.memory }}
            cpu: {{ .Values.portal.resources.limits.cpu }}

      - name: microclimate-editor
        image: {{ .Values.theia.repository}}:{{ .Values.theia.tag}}
        imagePullPolicy: "{{ .Values.imagePullPolicy}}"
        volumeMounts:
        - name: shared-workspace
          mountPath: /home/microclimate-workspace
        ports:
          - containerPort: {{ .Values.ports.theia }}
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          httpGet:
            path: /
            port: {{ .Values.ports.theia }}
        readinessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          httpGet:
            path: /
            port: {{ .Values.ports.theia }}
        resources:
          requests:
            memory: {{ .Values.theia.resources.requests.memory }}
            cpu: {{ .Values.theia.resources.requests.cpu }}
          limits:
            memory: {{ .Values.theia.resources.limits.memory }}
            cpu: {{ .Values.theia.resources.limits.cpu }}


      - name: microclimate-file-watcher
        image: {{ .Values.filewatcher.repository}}:{{ .Values.filewatcher.tag}}
        imagePullPolicy: "{{ .Values.imagePullPolicy}}"
        volumeMounts:
        - name: shared-workspace
          mountPath: /microclimate-workspace
        - name: docker-socket
          mountPath: /var/run/
        {{- if .Values.jenkins.Pipeline.Registry.Secret }}
        - name: registry-secret
          mountPath: /tmp/secret
        {{- end }}
        env:
          - name: IN_K8
            value: "true"
          - name: JMETER_IMAGE
            value: {{ .Values.jmeter.repository}}:{{ .Values.jmeter.tag}}
          {{- if .Values.jenkins.Pipeline.Registry.Url }}
          - name: DOCKER_REGISTRY
            value: "{{ .Values.jenkins.Pipeline.Registry.Url }}"
          {{- end }}
        ports:
          - containerPort: {{ .Values.ports.filewatcher }}
        command: ["/scripts/root-watcher.sh", "/microclimate-workspace"]
        livenessProbe:
          initialDelaySeconds: 420
          periodSeconds: 100
          httpGet:
            path: /health
            port: 9091
        readinessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          httpGet:
            path: /health
            port: {{ .Values.ports.filewatcher }}
        resources:
          requests:
            memory: {{ .Values.filewatcher.resources.requests.memory }}
            cpu: {{ .Values.filewatcher.resources.requests.cpu }}
          limits:
            memory: {{ .Values.filewatcher.resources.limits.memory }}
            cpu: {{ .Values.filewatcher.resources.limits.cpu }}
